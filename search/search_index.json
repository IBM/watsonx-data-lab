{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Db2 pureScale Overview The Db2 pureScale simulator allows a user to explore some of the concepts that are associated with a pureScale system. The user can define simple configurations and try selects and updates against members using a variety of connection and locking strategies. Member and clients can be turned off to show the effects of the outage on the configuration and the resulting recovery that pureScale will automate. While the simulator has been designed to show the concepts of running a Db2 pureScale system, it does not show all the possible system actions and communications between the clients, members, and cluster adapters. A production pureScale system will have many additional optimizations that will minimize much of the communication that you may see as part of the simulation. However, the high-level messaging is essentially the same, so you will get a sense of how the system works. What is Db2 pureScale? Db2 pureScale is a new optional Db2 feature that allows you to scale out your database on a set of servers in an \u201cactive-active\u201d configuration delivering high levels of both availability and scalability. In this configuration, the copy of Db2 running on each host (or server) can simultaneously access the same data for both read and write. A collection of one or more Db2 servers that share Db2 data is called a data-sharing group. A Db2 server that belongs to a data-sharing group is a member of that group. All members of a data-sharing group share the same database. Currently, the maximum number of members in a data-sharing group is 128. In addition to the Db2 members, there is also the pureScale\u2122 Cluster Caching Facility component which provides centralized lock management as well as a centralized global cache for data pages (known as the group buffer pool). Each member in the data sharing group can interact directly with the pureScale Cluster Caching Facility component, as shown below, through a very efficient 10Ge network which means each member has point-to-point connectivity to the centralized locking and caching facility. Db2 pureScale includes support for socket communication that eliminates the need for specialized 10Ge RDMA adapters. All the availability and recovery functions of pureScale are fully supported with sockets. However, the communication optimizations (i.e., memory to memory messaging with RDMA) are not applicable to socket configurations. To reduce communication between nodes in the cluster for lock management and global caching services, Db2 pureScale uses the pureScale Cluster Caching Facility (here-in referred to simply as the CF) along with RDMA technology to deliver transparent application scalability. RDMA allows each member in the cluster to directly access memory in the CF and for the CF to directly access the memory of each member. For example, assume that a member in a cluster (Member 1) wants to read a data page that is not in its local buffer pool. Db2 assigns an agent (or thread) to perform this transaction; the agent then uses RDMA to directly write into the memory of the CF to indicate that it has interest in a page. If the page that Member 1 wants to read is already in the CF\u2019s global centralized buffer pool, the CF will push that page directly into the memory of Member 1 instead of having the agent on that member perform the I/O operation to read it from disk. The use of RDMA allows Member 1's agent to simply make a memcopy (memory copy) call to a remote server without the need for costly process-to-process communication calls, processor interrupts, IP stack calls, and so on. Quite simply, pureScale allows a member\u2019s agent to perform what appears to be a local memory copy operation when in fact the target is the memory address of a remote machine. These lightweight remote memory calls, along with a centralized buffer pool and lock management facilities, means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. Most RDMA calls are so fast that the Db2 process making the call does not need to yield the CPU while waiting for the response from the CF and does not have to be rescheduled to complete the task. For example, to notify the CF that a row is about to be updated (and therefore an X lock is required) a member\u2019s agent performs a Set Lock State (SLS) request by writing the lock information directly into memory on the CF. The CF confirms that there are no other members in the cluster that already have this row X locked and will directly write into the requesting member\u2019s memory to grant the lock. The entire round trip for this SLS can take as little as 15 microseconds and therefore the agent does not need to yield the CPU. The agent can continue to be productive rather than waiting on an IP interrupt (avoiding unnecessary context switches) as is the case with other scale-out architectures. If for a specific operation, such as long-running batch transactions, it would make more sense for the Db2 agent to yield the CPU, Db2 will make an autonomic decision to dynamically yield the CPU. Another important Db2 scalability feature that goes together with transparent application scaling includes the Db2 pureScale built-in load balancing across the members of a cluster. Applications do not need to be cluster-aware to take advantage of the load balancing. The same client-side drivers that Db2 for z/OS data sharing customers use today work with Db2 pureScale for cluster load balancing. Db2 pureScale takes availability to a new level when compared to other offerings available on distributed platforms. Db2 pureScale provides full access to every page of data that does not need recovery and is always aware of which specific pages need recovery without having to perform a single I/O operation. This is yet another important innovation made possible through the unique capabilities of a centralized CF. Quick Links Reserving a Db2 pureScale Simulator Instance: TechZone Link Simulator Documentation: [Github] Db2 pureScale Documentation: Db2 pureScale","title":"Db2 pureScale Overview"},{"location":"#db2-purescale-overview","text":"The Db2 pureScale simulator allows a user to explore some of the concepts that are associated with a pureScale system. The user can define simple configurations and try selects and updates against members using a variety of connection and locking strategies. Member and clients can be turned off to show the effects of the outage on the configuration and the resulting recovery that pureScale will automate. While the simulator has been designed to show the concepts of running a Db2 pureScale system, it does not show all the possible system actions and communications between the clients, members, and cluster adapters. A production pureScale system will have many additional optimizations that will minimize much of the communication that you may see as part of the simulation. However, the high-level messaging is essentially the same, so you will get a sense of how the system works.","title":"Db2 pureScale Overview"},{"location":"#what-is-db2-purescale","text":"Db2 pureScale is a new optional Db2 feature that allows you to scale out your database on a set of servers in an \u201cactive-active\u201d configuration delivering high levels of both availability and scalability. In this configuration, the copy of Db2 running on each host (or server) can simultaneously access the same data for both read and write. A collection of one or more Db2 servers that share Db2 data is called a data-sharing group. A Db2 server that belongs to a data-sharing group is a member of that group. All members of a data-sharing group share the same database. Currently, the maximum number of members in a data-sharing group is 128. In addition to the Db2 members, there is also the pureScale\u2122 Cluster Caching Facility component which provides centralized lock management as well as a centralized global cache for data pages (known as the group buffer pool). Each member in the data sharing group can interact directly with the pureScale Cluster Caching Facility component, as shown below, through a very efficient 10Ge network which means each member has point-to-point connectivity to the centralized locking and caching facility. Db2 pureScale includes support for socket communication that eliminates the need for specialized 10Ge RDMA adapters. All the availability and recovery functions of pureScale are fully supported with sockets. However, the communication optimizations (i.e., memory to memory messaging with RDMA) are not applicable to socket configurations. To reduce communication between nodes in the cluster for lock management and global caching services, Db2 pureScale uses the pureScale Cluster Caching Facility (here-in referred to simply as the CF) along with RDMA technology to deliver transparent application scalability. RDMA allows each member in the cluster to directly access memory in the CF and for the CF to directly access the memory of each member. For example, assume that a member in a cluster (Member 1) wants to read a data page that is not in its local buffer pool. Db2 assigns an agent (or thread) to perform this transaction; the agent then uses RDMA to directly write into the memory of the CF to indicate that it has interest in a page. If the page that Member 1 wants to read is already in the CF\u2019s global centralized buffer pool, the CF will push that page directly into the memory of Member 1 instead of having the agent on that member perform the I/O operation to read it from disk. The use of RDMA allows Member 1's agent to simply make a memcopy (memory copy) call to a remote server without the need for costly process-to-process communication calls, processor interrupts, IP stack calls, and so on. Quite simply, pureScale allows a member\u2019s agent to perform what appears to be a local memory copy operation when in fact the target is the memory address of a remote machine. These lightweight remote memory calls, along with a centralized buffer pool and lock management facilities, means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. Most RDMA calls are so fast that the Db2 process making the call does not need to yield the CPU while waiting for the response from the CF and does not have to be rescheduled to complete the task. For example, to notify the CF that a row is about to be updated (and therefore an X lock is required) a member\u2019s agent performs a Set Lock State (SLS) request by writing the lock information directly into memory on the CF. The CF confirms that there are no other members in the cluster that already have this row X locked and will directly write into the requesting member\u2019s memory to grant the lock. The entire round trip for this SLS can take as little as 15 microseconds and therefore the agent does not need to yield the CPU. The agent can continue to be productive rather than waiting on an IP interrupt (avoiding unnecessary context switches) as is the case with other scale-out architectures. If for a specific operation, such as long-running batch transactions, it would make more sense for the Db2 agent to yield the CPU, Db2 will make an autonomic decision to dynamically yield the CPU. Another important Db2 scalability feature that goes together with transparent application scaling includes the Db2 pureScale built-in load balancing across the members of a cluster. Applications do not need to be cluster-aware to take advantage of the load balancing. The same client-side drivers that Db2 for z/OS data sharing customers use today work with Db2 pureScale for cluster load balancing. Db2 pureScale takes availability to a new level when compared to other offerings available on distributed platforms. Db2 pureScale provides full access to every page of data that does not need recovery and is always aware of which specific pages need recovery without having to perform a single I/O operation. This is yet another important innovation made possible through the unique capabilities of a centralized CF.","title":"What is Db2 pureScale?"},{"location":"#quick-links","text":"Reserving a Db2 pureScale Simulator Instance: TechZone Link Simulator Documentation: [Github] Db2 pureScale Documentation: Db2 pureScale","title":"Quick Links"},{"location":"ps-acknowledgements/","text":"Acknowledgments We would like to thank the Db2 development team for their help in validating the execution of the simulator. I would also like to thank Kelly Schlamb and Dale McInnis for their help, feedback and suggestions during the development of the program. Program Credits This program and documentation were compiled and created by: George Baklarz, PhD Americas Data Technical Sales IBM Software Markham, ON, CANADA Support I hope you enjoy using this demonstration package, and if you have any questions or comments, please send them to: George Baklarz baklarz@ca.ibm.com If the problem is associated with a simulation run, please record the session, and send the PSC file as part of the message so that we can try reproducing the problem. Thank-you for your time in trying out the Db2 pureScale Simulator!","title":"Acknowledgements"},{"location":"ps-acknowledgements/#acknowledgments","text":"We would like to thank the Db2 development team for their help in validating the execution of the simulator. I would also like to thank Kelly Schlamb and Dale McInnis for their help, feedback and suggestions during the development of the program.","title":"Acknowledgments"},{"location":"ps-acknowledgements/#program-credits","text":"This program and documentation were compiled and created by: George Baklarz, PhD Americas Data Technical Sales IBM Software Markham, ON, CANADA","title":"Program Credits"},{"location":"ps-acknowledgements/#support","text":"I hope you enjoy using this demonstration package, and if you have any questions or comments, please send them to: George Baklarz baklarz@ca.ibm.com If the problem is associated with a simulation run, please record the session, and send the PSC file as part of the message so that we can try reproducing the problem. Thank-you for your time in trying out the Db2 pureScale Simulator!","title":"Support"},{"location":"ps-cf/","text":"pureScale Cluster Caching Facility The pureScale Cluster Caching Facility, or CF, is used to control access to pages and locking across all the members. There can be up to two CFs in a pureScale system, but the simulator only uses one. You must configure a CF before the simulator will run. Aside from the pages and rows of data, the CF contains status information about the way the pureScale system is running. Row locks Pages currently in members buffers Pages that are being updated Row Locks Whenever a client requests a lock on a row for update, the CF will highlight the row with the color of the client. In this example two rows are currently locked by client #1. When a commit or rollback occurs, the lock will be released, and the background color of the row will turn gray. Page Read When a page is read into the buffer of a member, the CF will turn on a small block under the page with the color of the member. For instance, the first page (top left) has two blocks on - blue and yellow. This means that both member 1 and member 3 have read the page into their buffers. This information is important to the CF since it needs to track who has a page in memory if the page needs to be invalidated because of an update. Page Latch A page latch is used to control updates to a page. A latch is not the same as a lock since it is not kept for the duration of an update. The latch is only in place to guarantee that the page gets updated properly before moving back to the CF and subsequently to another member. In the example, page 3 is currently in the process of being updated by member #2 (green). If another member needs to update this page, the CF will request this page back from member #2 (and makes sure that member #2 has finished updating any data on the page) before giving access to the other member.","title":"Cluster Caching Facility"},{"location":"ps-cf/#purescale-cluster-caching-facility","text":"The pureScale Cluster Caching Facility, or CF, is used to control access to pages and locking across all the members. There can be up to two CFs in a pureScale system, but the simulator only uses one. You must configure a CF before the simulator will run. Aside from the pages and rows of data, the CF contains status information about the way the pureScale system is running. Row locks Pages currently in members buffers Pages that are being updated","title":"pureScale Cluster Caching Facility"},{"location":"ps-cf/#row-locks","text":"Whenever a client requests a lock on a row for update, the CF will highlight the row with the color of the client. In this example two rows are currently locked by client #1. When a commit or rollback occurs, the lock will be released, and the background color of the row will turn gray.","title":"Row Locks"},{"location":"ps-cf/#page-read","text":"When a page is read into the buffer of a member, the CF will turn on a small block under the page with the color of the member. For instance, the first page (top left) has two blocks on - blue and yellow. This means that both member 1 and member 3 have read the page into their buffers. This information is important to the CF since it needs to track who has a page in memory if the page needs to be invalidated because of an update.","title":"Page Read"},{"location":"ps-cf/#page-latch","text":"A page latch is used to control updates to a page. A latch is not the same as a lock since it is not kept for the duration of an update. The latch is only in place to guarantee that the page gets updated properly before moving back to the CF and subsequently to another member. In the example, page 3 is currently in the process of being updated by member #2 (green). If another member needs to update this page, the CF will request this page back from member #2 (and makes sure that member #2 has finished updating any data on the page) before giving access to the other member.","title":"Page Latch"},{"location":"ps-clients/","text":"Client Configuration The main interface to running a simulation is through the client. Examining the client, you will see that there are several buttons and values in it. There are five sections in the client: Buttons - these control the execution of the simulation and client Row Selected - used for selecting one of sixteen rows to process Power Off - used to kill a client to test error recovery Current Row - the row that was selected or updated in a transaction Row Value - the value of a row returned during a select, or the value that the row was updated to The buttons are the key component of the client since they control how the simulation runs. Some of these buttons may be grayed out depending on what the client is currently doing. However, the two buttons that are used to control the actual SQL that the client will run are always available. The buttons from left to right are: Select - used to select a row from the table Update - used to update the value of a particular row Commit - only available when an update has been done Rollback - only available when an update has been done Locking mode - changes the locking behavior for a select only Connect mode - determines how the client will connect Each one of these buttons is described in detail below. Select Button The Select button is used to select a row from the table. There are sixteen rows in the table and each one contains a first name. These names are randomly loaded into the Db2 table that resides on the IBM\u00ae Spectrum Scale file system. The client can only select one row at a time (no SELECT * ... available here!). To indicate which row you want to select, click on one of the sixteen row numbers found below the buttons. When you select a row, the square with the row number will turn blue, and the blue box below the monitor will be updated to contain the number. For instance, selecting row 5 with this client will result in the following display. Once a row has been selected, the SELECT button can be pressed and the simulation will start. If you do not have a valid configuration, an error message will be displayed beside the client. Once the select transaction has completed, the row value in the client will be updated to contain the value of the row from the table. Update Button The update button is found beside the select button and works similarly. The client can only update one row during a \"click\" but many rows can be updated before a commit or rollback is done. In other words, the client could potentially update all 16 rows before requiring an update or a commit to occur. Selecting a row for update is identical to retrieving a row. You first need to select the row number and the box containing the row number will turn blue. Before issuing an update, you must place a value beside the row number box below the monitor. The following image shows the client replacing the value in row 5 with the value ABCD. You can also click on the row number box beside the row value to generate a random name. This is more convenient if you want to use the mouse to run the simulation rather than using the keyboard to enter a value. Once you've entered a value for the row you can press the update button. If you do not supply a value for the row, an error message will be generated. Once an update has successfully completed, the row box in the grid will turn yellow to indicate that this row has been updated. The colors of the boxes will reset to gray when all updates are either committed or rolled back. Commit and Rollback The Commit and Rollback buttons are only available when you have successfully updated a row. Prior to this, the commit and rollback buttons are grayed out. Once we update a row, we will implicitly create a transaction. The implications of this are that any subsequent SELECT or UPDATE that is run from this client can only connect to the member that the original update went to. In other words, all transactions within this unit of work will have affinity (or be restricted to) to the member that the transaction started on. Selecting the green arrow (Commit) will cause the updates to be committed on the CF and all locks released. Selecting the red \"X\" (Rollback) will cause the updates to be rolled back and no changes will have been placed into the table. Locking Mode The locking mode button lets you change how SELECTs (not UPDATES!) are handled by the member. By default, the client will request that currently committed semantics be used by the client. This will (in most cases) give the client the last properly committed value for a row. For instance, with the normal locking mode (closed lock) any select statement to a member will only read committed information. Normally if there are no locks on a row you would receive the current data that is in the local buffer pool or what is on disk. The image below shows that client #1 has retrieved the contents of row #1 (JEFF). The next image shows client #2 updating the value of row #1 to the value ABCD. The value in the buffer has changed to ABCD for row #1. Note also that the log file will now contain the original value of the row before the update. When client #1 requests the row again, it will return the value of JEFF from the log file rather than the value from the buffer. The reason is that with currently committed semantics, we get the last known committed value of the row from the log, rather than the current \"dirty\" data in the buffer. Note that the row is not committed to disk or the CF until the client does a COMMIT. If we want to get the value of the row currently in the buffer, we will change the locking mode to UR (Uncommitted Read). Clicking on the lock icon will change it to an open lock. Now issuing a SELECT statement will result in the current data on the page being returned to the client. Note that the client that initiated an update against a row will always see the current contents of the row, regardless of the locking model. Since the client did the update, they will always see the change that they made, rather than the previous, committed version. Clients that attempt to update a row that is currently locked on a different member will always wait for that update to complete. For read requests, the member will go to disk or the CF if the page is not in the current bufferpool. The reason for this is that a member cannot go \"off\" member to get the previous value of the row in the log. For instance, the following image shows an updated row in member #1 (row 1 = TIFF) and member #2 requesting the same row via member #2. The client (#2) will have to wait for the update to complete before updating the contents of the row. If you use UR mode (uncommitted read), a client will read the contents of a row in the bufferpool even if it is locked. Connection Type For a select or update to take place, a connection must first be made to a Db2 member. In a pureScale system, a connection to a member is done when the client first connects; however, the connection can move to another member during subsequent CONNECT requests or at a transaction boundary. In the pureScale simulator, a new connection occurs whenever a SELECT takes place. The same is true when an UPDATE occurs, except that the client will NOT connect to a different member (for any subsequent SELECTs or UPDATEs) until a COMMIT or ROLLBACK occurs. The connection type box will turn gray when an UPDATE occurs, so all subsequent SELECTs and UPDATEs will continue to go to the same member. Whenever a transaction is started from a client, it will connect to one of the Db2 members that is available. Which member it connects to is based on the Connection Type icon found at the far right of the buttons at the top of the client. By default, the connection is set to workload balancing. The small graph icon represents CPU performance. When running with workload balancing, the connection will go to the least-used member. At the top of each member is the current load of the machine. The load of the member over time is shown as a small graph underneath the CPU image. When the client attempts a connection, it will look to see which the least-busy member is and connect there. The loads on the systems are random and change as the simulation runs. If you want to set the load at a level (to guarantee you can show the client going to the least busy member), you can click on the graph in the member. This will display a grid with 4 CPU levels: When you click on 20, 40, 60, or 80, the CPU level of that member will be fixed at that amount. The CPU level will remain at the level (40 in this example) until you click on the 40 again. The performance of the member will then begin to fluctuate as before. Clicking on the connection button will make it change to round-robin mode. Round-robin mode means that at the start of any transaction the client will connect to the next available member. For instance, the first connection will always be to member 1. The second connection will be to member 2, and so on and eventually returning to member 1. If a member is not available, the connection will go to the next available member. The next three connection options are based on \"affinity\" or connection to a specific server. Clicking on the connection button will now change it from round-robin to connecting directly to members 1, 2, or 3 as shown in the following images. When using affinity-based connections, the client will not be able to run transactions if their affinity server is not available.","title":"Client Configuration"},{"location":"ps-clients/#client-configuration","text":"The main interface to running a simulation is through the client. Examining the client, you will see that there are several buttons and values in it. There are five sections in the client: Buttons - these control the execution of the simulation and client Row Selected - used for selecting one of sixteen rows to process Power Off - used to kill a client to test error recovery Current Row - the row that was selected or updated in a transaction Row Value - the value of a row returned during a select, or the value that the row was updated to The buttons are the key component of the client since they control how the simulation runs. Some of these buttons may be grayed out depending on what the client is currently doing. However, the two buttons that are used to control the actual SQL that the client will run are always available. The buttons from left to right are: Select - used to select a row from the table Update - used to update the value of a particular row Commit - only available when an update has been done Rollback - only available when an update has been done Locking mode - changes the locking behavior for a select only Connect mode - determines how the client will connect Each one of these buttons is described in detail below.","title":"Client Configuration"},{"location":"ps-clients/#select-button","text":"The Select button is used to select a row from the table. There are sixteen rows in the table and each one contains a first name. These names are randomly loaded into the Db2 table that resides on the IBM\u00ae Spectrum Scale file system. The client can only select one row at a time (no SELECT * ... available here!). To indicate which row you want to select, click on one of the sixteen row numbers found below the buttons. When you select a row, the square with the row number will turn blue, and the blue box below the monitor will be updated to contain the number. For instance, selecting row 5 with this client will result in the following display. Once a row has been selected, the SELECT button can be pressed and the simulation will start. If you do not have a valid configuration, an error message will be displayed beside the client. Once the select transaction has completed, the row value in the client will be updated to contain the value of the row from the table.","title":"Select Button"},{"location":"ps-clients/#update-button","text":"The update button is found beside the select button and works similarly. The client can only update one row during a \"click\" but many rows can be updated before a commit or rollback is done. In other words, the client could potentially update all 16 rows before requiring an update or a commit to occur. Selecting a row for update is identical to retrieving a row. You first need to select the row number and the box containing the row number will turn blue. Before issuing an update, you must place a value beside the row number box below the monitor. The following image shows the client replacing the value in row 5 with the value ABCD. You can also click on the row number box beside the row value to generate a random name. This is more convenient if you want to use the mouse to run the simulation rather than using the keyboard to enter a value. Once you've entered a value for the row you can press the update button. If you do not supply a value for the row, an error message will be generated. Once an update has successfully completed, the row box in the grid will turn yellow to indicate that this row has been updated. The colors of the boxes will reset to gray when all updates are either committed or rolled back.","title":"Update Button"},{"location":"ps-clients/#commit-and-rollback","text":"The Commit and Rollback buttons are only available when you have successfully updated a row. Prior to this, the commit and rollback buttons are grayed out. Once we update a row, we will implicitly create a transaction. The implications of this are that any subsequent SELECT or UPDATE that is run from this client can only connect to the member that the original update went to. In other words, all transactions within this unit of work will have affinity (or be restricted to) to the member that the transaction started on. Selecting the green arrow (Commit) will cause the updates to be committed on the CF and all locks released. Selecting the red \"X\" (Rollback) will cause the updates to be rolled back and no changes will have been placed into the table.","title":"Commit and Rollback"},{"location":"ps-clients/#locking-mode","text":"The locking mode button lets you change how SELECTs (not UPDATES!) are handled by the member. By default, the client will request that currently committed semantics be used by the client. This will (in most cases) give the client the last properly committed value for a row. For instance, with the normal locking mode (closed lock) any select statement to a member will only read committed information. Normally if there are no locks on a row you would receive the current data that is in the local buffer pool or what is on disk. The image below shows that client #1 has retrieved the contents of row #1 (JEFF). The next image shows client #2 updating the value of row #1 to the value ABCD. The value in the buffer has changed to ABCD for row #1. Note also that the log file will now contain the original value of the row before the update. When client #1 requests the row again, it will return the value of JEFF from the log file rather than the value from the buffer. The reason is that with currently committed semantics, we get the last known committed value of the row from the log, rather than the current \"dirty\" data in the buffer. Note that the row is not committed to disk or the CF until the client does a COMMIT. If we want to get the value of the row currently in the buffer, we will change the locking mode to UR (Uncommitted Read). Clicking on the lock icon will change it to an open lock. Now issuing a SELECT statement will result in the current data on the page being returned to the client. Note that the client that initiated an update against a row will always see the current contents of the row, regardless of the locking model. Since the client did the update, they will always see the change that they made, rather than the previous, committed version. Clients that attempt to update a row that is currently locked on a different member will always wait for that update to complete. For read requests, the member will go to disk or the CF if the page is not in the current bufferpool. The reason for this is that a member cannot go \"off\" member to get the previous value of the row in the log. For instance, the following image shows an updated row in member #1 (row 1 = TIFF) and member #2 requesting the same row via member #2. The client (#2) will have to wait for the update to complete before updating the contents of the row. If you use UR mode (uncommitted read), a client will read the contents of a row in the bufferpool even if it is locked.","title":"Locking Mode"},{"location":"ps-clients/#connection-type","text":"For a select or update to take place, a connection must first be made to a Db2 member. In a pureScale system, a connection to a member is done when the client first connects; however, the connection can move to another member during subsequent CONNECT requests or at a transaction boundary. In the pureScale simulator, a new connection occurs whenever a SELECT takes place. The same is true when an UPDATE occurs, except that the client will NOT connect to a different member (for any subsequent SELECTs or UPDATEs) until a COMMIT or ROLLBACK occurs. The connection type box will turn gray when an UPDATE occurs, so all subsequent SELECTs and UPDATEs will continue to go to the same member. Whenever a transaction is started from a client, it will connect to one of the Db2 members that is available. Which member it connects to is based on the Connection Type icon found at the far right of the buttons at the top of the client. By default, the connection is set to workload balancing. The small graph icon represents CPU performance. When running with workload balancing, the connection will go to the least-used member. At the top of each member is the current load of the machine. The load of the member over time is shown as a small graph underneath the CPU image. When the client attempts a connection, it will look to see which the least-busy member is and connect there. The loads on the systems are random and change as the simulation runs. If you want to set the load at a level (to guarantee you can show the client going to the least busy member), you can click on the graph in the member. This will display a grid with 4 CPU levels: When you click on 20, 40, 60, or 80, the CPU level of that member will be fixed at that amount. The CPU level will remain at the level (40 in this example) until you click on the 40 again. The performance of the member will then begin to fluctuate as before. Clicking on the connection button will make it change to round-robin mode. Round-robin mode means that at the start of any transaction the client will connect to the next available member. For instance, the first connection will always be to member 1. The second connection will be to member 2, and so on and eventually returning to member 1. If a member is not available, the connection will go to the next available member. The next three connection options are based on \"affinity\" or connection to a specific server. Clicking on the connection button will now change it from round-robin to connecting directly to members 1, 2, or 3 as shown in the following images. When using affinity-based connections, the client will not be able to run transactions if their affinity server is not available.","title":"Connection Type"},{"location":"ps-components/","text":"Client, Member, GPFS and CF Components A pureScale system cannot run unless you have at least one client, one member, the IBM\u00ae Spectrum Scale file system, and one pureScale Cluster Caching Facility (referred to as the CF from now on). To create these objects, you will need to use the Objects toolbar found at the top left of the simulator program: From left to right, these buttons represent the following objects. The first button is used for creating a client on the screen. When the client button is pressed, one client will be placed onto the simulator screen. The client will be connected to the network (Ethernet). Up to three clients can be connected to the Ethernet and each one will have a unique number and color. The following image shows three clients on the screen. Client #1 is purple, client #2 is orange, and client #3 is red. The client color will be used in the simulation to mark which client is holding an update lock on a row. The CF will be described later, but here is an example of the CF with locks being held by various clients: A pureScale system must have at least one member, so the member button is used to create a Db2 server (member) in the simulator. Pressing the member button will place a member on the screen, connected to both the Ethernet, for client communication, as well as the 10Ge network, for communicating with the CF. In a similar fashion to the clients, each member has a unique number and color as shown in the following image. Member #1 is light blue, member #2 is light green, and member #3 is yellow. These colors are used in the CF to highlight which member has read a page into its local buffer pool. In the CF, read \"interest\" in a page is marked by small squares below the lock icon. The color of the square indicates which member has read a particular page. In addition to creating a member on the screen, the member button will also create a log file associated with the member. This log file is placed to the left of the database file system to indicate that these files are found in the file system but are separate for each member. The following image shows three log files created for three members. A log file will only be created if the member exists. The final object that can be created is the pureScale Cluster Caching Facility, or CF. Db2 pureScale uses the pureScale Cluster Caching Facility along with RDMA technology to deliver transparent application scalability. The CF provides centralized buffer pool and lock management facilities, which means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. The CF is placed on the bottom right-hand side of the screen. Only one CF exists in the simulator, but a pureScale system can have both a primary and a secondary CF installed. For true high-availability operation, it is recommended that two CFs exist if one of them fails. A system can be built by adding clients, members, and CF. In fact, you can start with a simple configuration and add members or clients to increase the complexity of the system. Once you hit the maximum number of clients or members, the simulator will not allow you add any more. Note: Clients can be killed with the power off button that is found on them. You can then re-add the client later if you want. However, killing a Db2 member will cause an automatic recovery if there are any outstanding transactions on that member. If this is the case, the member will be restarted automatically. If there are no outstanding transactions, the member will be turned off. Stopping clients or members can only take place when any activity in the system (like a select or update) has completed. To quickly build a one client, one member system, click on the Sample button. This button will generate the following configuration. If you want to delete your configuration, or start from the beginning, click on the Reset button. The reset button can be pressed at any time when using the pureScale simulator. If you are running your own script, a pre-built one, or in the middle of a recording, hitting the Reset button will stop all activity and create a clean configuration. Note that hitting reset will delete any recording that you may have done and destroy the configuration you had.","title":"pureScale Components"},{"location":"ps-components/#client-member-gpfs-and-cf-components","text":"A pureScale system cannot run unless you have at least one client, one member, the IBM\u00ae Spectrum Scale file system, and one pureScale Cluster Caching Facility (referred to as the CF from now on). To create these objects, you will need to use the Objects toolbar found at the top left of the simulator program: From left to right, these buttons represent the following objects. The first button is used for creating a client on the screen. When the client button is pressed, one client will be placed onto the simulator screen. The client will be connected to the network (Ethernet). Up to three clients can be connected to the Ethernet and each one will have a unique number and color. The following image shows three clients on the screen. Client #1 is purple, client #2 is orange, and client #3 is red. The client color will be used in the simulation to mark which client is holding an update lock on a row. The CF will be described later, but here is an example of the CF with locks being held by various clients: A pureScale system must have at least one member, so the member button is used to create a Db2 server (member) in the simulator. Pressing the member button will place a member on the screen, connected to both the Ethernet, for client communication, as well as the 10Ge network, for communicating with the CF. In a similar fashion to the clients, each member has a unique number and color as shown in the following image. Member #1 is light blue, member #2 is light green, and member #3 is yellow. These colors are used in the CF to highlight which member has read a page into its local buffer pool. In the CF, read \"interest\" in a page is marked by small squares below the lock icon. The color of the square indicates which member has read a particular page. In addition to creating a member on the screen, the member button will also create a log file associated with the member. This log file is placed to the left of the database file system to indicate that these files are found in the file system but are separate for each member. The following image shows three log files created for three members. A log file will only be created if the member exists. The final object that can be created is the pureScale Cluster Caching Facility, or CF. Db2 pureScale uses the pureScale Cluster Caching Facility along with RDMA technology to deliver transparent application scalability. The CF provides centralized buffer pool and lock management facilities, which means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. The CF is placed on the bottom right-hand side of the screen. Only one CF exists in the simulator, but a pureScale system can have both a primary and a secondary CF installed. For true high-availability operation, it is recommended that two CFs exist if one of them fails. A system can be built by adding clients, members, and CF. In fact, you can start with a simple configuration and add members or clients to increase the complexity of the system. Once you hit the maximum number of clients or members, the simulator will not allow you add any more. Note: Clients can be killed with the power off button that is found on them. You can then re-add the client later if you want. However, killing a Db2 member will cause an automatic recovery if there are any outstanding transactions on that member. If this is the case, the member will be restarted automatically. If there are no outstanding transactions, the member will be turned off. Stopping clients or members can only take place when any activity in the system (like a select or update) has completed. To quickly build a one client, one member system, click on the Sample button. This button will generate the following configuration. If you want to delete your configuration, or start from the beginning, click on the Reset button. The reset button can be pressed at any time when using the pureScale simulator. If you are running your own script, a pre-built one, or in the middle of a recording, hitting the Reset button will stop all activity and create a clean configuration. Note that hitting reset will delete any recording that you may have done and destroy the configuration you had.","title":"Client, Member, GPFS and CF Components"},{"location":"ps-disclaimer/","text":"Disclaimer Db2 pureScale Copyright \u00a9 2025 by International Business Machines Corporation (IBM). All rights reserved. Printed in Canada. Except as permitted under the Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of IBM, with the exception that the program listings may be entered, stored, and executed in a computer system, but they may not be reproduced for publication. The contents of this lab represent those features that may or may not be available in the current release of any products mentioned within this lab despite what the lab may say. IBM reserves the right to include or exclude any functionality mentioned in this lab for the current release of Db2 pureScale, or a subsequent release. In addition, any claims made in this lab are not official communications by IBM; rather, they are observed by the authors in unaudited testing and research. The views expressed in this lab is those of the authors and not necessarily those of the IBM Corporation; both are not liable for any of the claims, assertions, or contents in this lab. IBM's statements regarding its plans, directions, and intent are subject to change or withdrawal without notice and at IBM's sole discretion. Information regarding potential future products is intended to outline our general product direction, and it should not be relied on in making a purchasing decision. The information mentioned regarding potential future products is not a commitment, promise, or legal obligation to deliver any material, code, or functionality. Information about potential future products may not be incorporated into any contract. The development, release, and timing of any future feature or functionality described for our products remains at our sole discretion. Performance is based on measurements and projections using standard IBM benchmarks in a controlled environment. The actual throughput or performance that any user will experience will vary depending upon many factors, including considerations such as the amount of multiprogramming in the user's job stream, the I/O configuration, the storage configuration, and the workload processed. Therefore, no assurance can be given that an individual user will achieve results like those stated here. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM. Information in this eBook (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. THIS DOCUMENT IS DISTRIBUTED \"AS IS\" WITHOUT ANY WARRANTY, EITHER EXPRESS OR IMPLIED. IN NO EVENT SHALL IBM BE LIABLE FOR ANY DAMAGE ARISING FROM THE USE OF THIS INFORMATION, INCLUDING BUT NOT LIMITED TO, LOSS OF DATA, BUSINESS INTERRUPTION, LOSS OF PROFIT OR LOSS OF OPPORTUNITY. IBM products and services are warranted according to the terms and conditions of the agreements under which they are provided. References in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs, or services available in all countries in which IBM operates or does business. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements, or other publicly available sources. IBM has not tested those products in connection with this publication and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM's products. IBM EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. The provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks, or other intellectual property right. IBM, the IBM logo, ibm.com, Aspera\u00ae, Bluemix, Blueworks Live, CICS, Clearcase, Cognos\u00ae, DOORS\u00ae, Emptoris\u00ae, Enterprise Document Management System\u2122, FASP\u00ae, FileNet\u00ae, Global Business Services \u00ae, Global Technology Services \u00ae, IBM ExperienceOne\u2122, IBM SmartCloud\u00ae, IBM Social Business\u00ae, Information on Demand, ILOG, Maximo\u00ae, MQIntegrator\u00ae, MQSeries\u00ae, Netcool\u00ae, OMEGAMON, OpenPower, PureAnalytics\u2122, PureApplication\u00ae, pureCluster\u2122, PureCoverage\u00ae, PureData\u00ae, PureExperience\u00ae, PureFlex\u00ae, pureQuery\u00ae, pureScale\u00ae, PureSystems\u00ae, QRadar\u00ae, Rational\u00ae, Rhapsody\u00ae, Smarter Commerce\u00ae, SoDA, SPSS, Sterling Commerce\u00ae, StoredIQ, Tealeaf\u00ae, Tivoli\u00ae, Trusteer\u00ae, Unica\u00ae, urban{code}\u00ae, Watson, WebSphere\u00ae, Worklight\u00ae, X-Force\u00ae and System z\u00ae Z/OS, are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at \"Copyright and trademark information\" at: www.ibm.com/legal/copytrade.shtml. All trademarks or copyrights mentioned herein are the possession of their respective owners and IBM makes no claim of ownership by the mention of products that contain these marks.","title":"Disclaimer"},{"location":"ps-disclaimer/#disclaimer","text":"","title":"Disclaimer"},{"location":"ps-disclaimer/#db2-purescale","text":"Copyright \u00a9 2025 by International Business Machines Corporation (IBM). All rights reserved. Printed in Canada. Except as permitted under the Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of IBM, with the exception that the program listings may be entered, stored, and executed in a computer system, but they may not be reproduced for publication. The contents of this lab represent those features that may or may not be available in the current release of any products mentioned within this lab despite what the lab may say. IBM reserves the right to include or exclude any functionality mentioned in this lab for the current release of Db2 pureScale, or a subsequent release. In addition, any claims made in this lab are not official communications by IBM; rather, they are observed by the authors in unaudited testing and research. The views expressed in this lab is those of the authors and not necessarily those of the IBM Corporation; both are not liable for any of the claims, assertions, or contents in this lab. IBM's statements regarding its plans, directions, and intent are subject to change or withdrawal without notice and at IBM's sole discretion. Information regarding potential future products is intended to outline our general product direction, and it should not be relied on in making a purchasing decision. The information mentioned regarding potential future products is not a commitment, promise, or legal obligation to deliver any material, code, or functionality. Information about potential future products may not be incorporated into any contract. The development, release, and timing of any future feature or functionality described for our products remains at our sole discretion. Performance is based on measurements and projections using standard IBM benchmarks in a controlled environment. The actual throughput or performance that any user will experience will vary depending upon many factors, including considerations such as the amount of multiprogramming in the user's job stream, the I/O configuration, the storage configuration, and the workload processed. Therefore, no assurance can be given that an individual user will achieve results like those stated here. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM. Information in this eBook (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. THIS DOCUMENT IS DISTRIBUTED \"AS IS\" WITHOUT ANY WARRANTY, EITHER EXPRESS OR IMPLIED. IN NO EVENT SHALL IBM BE LIABLE FOR ANY DAMAGE ARISING FROM THE USE OF THIS INFORMATION, INCLUDING BUT NOT LIMITED TO, LOSS OF DATA, BUSINESS INTERRUPTION, LOSS OF PROFIT OR LOSS OF OPPORTUNITY. IBM products and services are warranted according to the terms and conditions of the agreements under which they are provided. References in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs, or services available in all countries in which IBM operates or does business. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements, or other publicly available sources. IBM has not tested those products in connection with this publication and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM's products. IBM EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. The provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks, or other intellectual property right. IBM, the IBM logo, ibm.com, Aspera\u00ae, Bluemix, Blueworks Live, CICS, Clearcase, Cognos\u00ae, DOORS\u00ae, Emptoris\u00ae, Enterprise Document Management System\u2122, FASP\u00ae, FileNet\u00ae, Global Business Services \u00ae, Global Technology Services \u00ae, IBM ExperienceOne\u2122, IBM SmartCloud\u00ae, IBM Social Business\u00ae, Information on Demand, ILOG, Maximo\u00ae, MQIntegrator\u00ae, MQSeries\u00ae, Netcool\u00ae, OMEGAMON, OpenPower, PureAnalytics\u2122, PureApplication\u00ae, pureCluster\u2122, PureCoverage\u00ae, PureData\u00ae, PureExperience\u00ae, PureFlex\u00ae, pureQuery\u00ae, pureScale\u00ae, PureSystems\u00ae, QRadar\u00ae, Rational\u00ae, Rhapsody\u00ae, Smarter Commerce\u00ae, SoDA, SPSS, Sterling Commerce\u00ae, StoredIQ, Tealeaf\u00ae, Tivoli\u00ae, Trusteer\u00ae, Unica\u00ae, urban{code}\u00ae, Watson, WebSphere\u00ae, Worklight\u00ae, X-Force\u00ae and System z\u00ae Z/OS, are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at \"Copyright and trademark information\" at: www.ibm.com/legal/copytrade.shtml. All trademarks or copyrights mentioned herein are the possession of their respective owners and IBM makes no claim of ownership by the mention of products that contain these marks.","title":"Db2 pureScale"},{"location":"ps-getting-started/","text":"Accessing the Simulator You will be provided with either a link (workshop) or an email that provides access to the pureScale simulator system. For those reserving the pureScale simulator directly, your email will provide a link to your reservations. Select your pureScale reservation from the list. The reservation contains the details about the virtual machine you are using. The demonstration will use the console of the virtual machine. To access the console, you will need to scroll down the reservation details until you find the blue console button. Beside the blue console button is a series of vertical dots which you will click to view additional console options. Select the open console button. This will produce a small image of the virtual machine console on top of your reservation details. At the top of the desktop image is a button that will maximize the console to use up your entire display. Once you maximize the image, you will log into the system. The name of the user is db2pot and the password is ilovepurecale . The desktop will display after you log on. In order to make it easier to view the pureScale simulator, it is recommended to double-click on the Resize_Screen button. This will reset the screen to a smaller resolution. Once you have resized the screen, double-click on the pureScale icon to start the simulator. At this point you are ready to use the simulator! Removing the console toolbar To remove the control bar at the top of the virtual console, click on the arrow at the bottom of the control bar. The control bar is not used during the pureScale demo and is only meant for resizing the screen or copying text into the image.","title":"Accessing the System"},{"location":"ps-getting-started/#accessing-the-simulator","text":"You will be provided with either a link (workshop) or an email that provides access to the pureScale simulator system. For those reserving the pureScale simulator directly, your email will provide a link to your reservations. Select your pureScale reservation from the list. The reservation contains the details about the virtual machine you are using. The demonstration will use the console of the virtual machine. To access the console, you will need to scroll down the reservation details until you find the blue console button. Beside the blue console button is a series of vertical dots which you will click to view additional console options. Select the open console button. This will produce a small image of the virtual machine console on top of your reservation details. At the top of the desktop image is a button that will maximize the console to use up your entire display. Once you maximize the image, you will log into the system. The name of the user is db2pot and the password is ilovepurecale . The desktop will display after you log on. In order to make it easier to view the pureScale simulator, it is recommended to double-click on the Resize_Screen button. This will reset the screen to a smaller resolution. Once you have resized the screen, double-click on the pureScale icon to start the simulator. At this point you are ready to use the simulator! Removing the console toolbar To remove the control bar at the top of the virtual console, click on the arrow at the bottom of the control bar. The control bar is not used during the pureScale demo and is only meant for resizing the screen or copying text into the image.","title":"Accessing the Simulator"},{"location":"ps-gpfs/","text":"IBM Spectrum Scale IBM\u00ae Spectrum Scale is installed as part of Db2 pureScale feature. IBM Spectrum Scale is the only supported file system in a Db2 pureScale environment and is used by Db2 to store the database, logs, and control files. The database is created for you whenever you start up the simulator, or if you reset the system. The database is immediately filled with 4-character names - a unique value for all sixteen rows found in the table. Every time that you reset or start the system, the names will change. If you run a simulation multiple times you will find that the data in the rows will change. If you want to change the names that are used by the simulator, you need to edit the file called _gpfs.psc found in the system directory. This file has a line like the following. na mes = { GORD , BILL , JILL , CODY , ... } Replace the names with up to 32 different values, and the simulator will randomly select 16 names to fill the table with. Before you start running a simulation, you can drag pages from the file system to a member or the CF to pre-populate them with data. You can only move a page from the database to the same page slot in a member (or CF). For instance, page 1 from the database must move to page 1 of a member. You do not have to populate all the members or the CF with data, so it is possible to load up the CF with data without filling any buffer pages in the members. To move a page, click on a page in the CF and then while holding the LEFT mouse button down, drag the page to a member or CF. When you release the mouse over a page in a member or CF, the contents of that page will be updated with the data from the database.","title":"Spectrum Scale"},{"location":"ps-gpfs/#ibm-spectrum-scale","text":"IBM\u00ae Spectrum Scale is installed as part of Db2 pureScale feature. IBM Spectrum Scale is the only supported file system in a Db2 pureScale environment and is used by Db2 to store the database, logs, and control files. The database is created for you whenever you start up the simulator, or if you reset the system. The database is immediately filled with 4-character names - a unique value for all sixteen rows found in the table. Every time that you reset or start the system, the names will change. If you run a simulation multiple times you will find that the data in the rows will change. If you want to change the names that are used by the simulator, you need to edit the file called _gpfs.psc found in the system directory. This file has a line like the following. na mes = { GORD , BILL , JILL , CODY , ... } Replace the names with up to 32 different values, and the simulator will randomly select 16 names to fill the table with. Before you start running a simulation, you can drag pages from the file system to a member or the CF to pre-populate them with data. You can only move a page from the database to the same page slot in a member (or CF). For instance, page 1 from the database must move to page 1 of a member. You do not have to populate all the members or the CF with data, so it is possible to load up the CF with data without filling any buffer pages in the members. To move a page, click on a page in the CF and then while holding the LEFT mouse button down, drag the page to a member or CF. When you release the mouse over a page in a member or CF, the contents of that page will be updated with the data from the database.","title":"IBM Spectrum Scale"},{"location":"ps-intro/","text":"Db2 pureScale Overview The Db2 pureScale simulator allows a user to explore some of the concepts that are associated with a pureScale system. The user can define simple configurations and try selects and updates against members using a variety of connection and locking strategies. Member and clients can be turned off to show the effects of the outage on the configuration and the resulting recovery that pureScale will automate. While the simulator has been designed to show the concepts of running a Db2 pureScale system, it does not show all the possible system actions and communications between the clients, members, and cluster adapters. A production pureScale system will have many additional optimizations that will minimize much of the communication that you may see as part of the simulation. However, the high-level messaging is essentially the same, so you will get a sense of how the system works. What is Db2 pureScale? Db2 pureScale is a new optional Db2 feature that allows you to scale out your database on a set of servers in an \u201cactive-active\u201d configuration delivering high levels of both availability and scalability. In this configuration, the copy of Db2 running on each host (or server) can simultaneously access the same data for both read and write. A collection of one or more Db2 servers that share Db2 data is called a data-sharing group. A Db2 server that belongs to a data-sharing group is a member of that group. All members of a data-sharing group share the same database. Currently, the maximum number of members in a data-sharing group is 128. In addition to the Db2 members, there is also the pureScale\u2122 Cluster Caching Facility component which provides centralized lock management as well as a centralized global cache for data pages (known as the group buffer pool). Each member in the data sharing group can interact directly with the pureScale Cluster Caching Facility component, as shown below, through a very efficient 10Ge network which means each member has point-to-point connectivity to the centralized locking and caching facility. Db2 pureScale includes support for socket communication that eliminates the need for specialized 10Ge RDMA adapters. All the availability and recovery functions of pureScale are fully supported with sockets. However, the communication optimizations (i.e., memory to memory messaging with RDMA) are not applicable to socket configurations. To reduce communication between nodes in the cluster for lock management and global caching services, Db2 pureScale uses the pureScale Cluster Caching Facility (here-in referred to simply as the CF) along with RDMA technology to deliver transparent application scalability. RDMA allows each member in the cluster to directly access memory in the CF and for the CF to directly access the memory of each member. For example, assume that a member in a cluster (Member 1) wants to read a data page that is not in its local buffer pool. Db2 assigns an agent (or thread) to perform this transaction; the agent then uses RDMA to directly write into the memory of the CF to indicate that it has interest in a page. If the page that Member 1 wants to read is already in the CF\u2019s global centralized buffer pool, the CF will push that page directly into the memory of Member 1 instead of having the agent on that member perform the I/O operation to read it from disk. The use of RDMA allows Member 1's agent to simply make a memcopy (memory copy) call to a remote server without the need for costly process-to-process communication calls, processor interrupts, IP stack calls, and so on. Quite simply, pureScale allows a member\u2019s agent to perform what appears to be a local memory copy operation when in fact the target is the memory address of a remote machine. These lightweight remote memory calls, along with a centralized buffer pool and lock management facilities, means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. Most RDMA calls are so fast that the Db2 process making the call does not need to yield the CPU while waiting for the response from the CF and does not have to be rescheduled to complete the task. For example, to notify the CF that a row is about to be updated (and therefore an X lock is required) a member\u2019s agent performs a Set Lock State (SLS) request by writing the lock information directly into memory on the CF. The CF confirms that there are no other members in the cluster that already have this row X locked and will directly write into the requesting member\u2019s memory to grant the lock. The entire round trip for this SLS can take as little as 15 microseconds and therefore the agent does not need to yield the CPU. The agent can continue to be productive rather than waiting on an IP interrupt (avoiding unnecessary context switches) as is the case with other scale-out architectures. If for a specific operation, such as long-running batch transactions, it would make more sense for the Db2 agent to yield the CPU, Db2 will make an autonomic decision to dynamically yield the CPU. Another important Db2 scalability feature that goes together with transparent application scaling includes the Db2 pureScale built-in load balancing across the members of a cluster. Applications do not need to be cluster-aware to take advantage of the load balancing. The same client-side drivers that Db2 for z/OS data sharing customers use today work with Db2 pureScale for cluster load balancing. Db2 pureScale takes availability to a new level when compared to other offerings available on distributed platforms. Db2 pureScale provides full access to every page of data that does not need recovery and is always aware of which specific pages need recovery without having to perform a single I/O operation. This is yet another important innovation made possible through the unique capabilities of a centralized CF.","title":"Introduction"},{"location":"ps-intro/#db2-purescale-overview","text":"The Db2 pureScale simulator allows a user to explore some of the concepts that are associated with a pureScale system. The user can define simple configurations and try selects and updates against members using a variety of connection and locking strategies. Member and clients can be turned off to show the effects of the outage on the configuration and the resulting recovery that pureScale will automate. While the simulator has been designed to show the concepts of running a Db2 pureScale system, it does not show all the possible system actions and communications between the clients, members, and cluster adapters. A production pureScale system will have many additional optimizations that will minimize much of the communication that you may see as part of the simulation. However, the high-level messaging is essentially the same, so you will get a sense of how the system works.","title":"Db2 pureScale Overview"},{"location":"ps-intro/#what-is-db2-purescale","text":"Db2 pureScale is a new optional Db2 feature that allows you to scale out your database on a set of servers in an \u201cactive-active\u201d configuration delivering high levels of both availability and scalability. In this configuration, the copy of Db2 running on each host (or server) can simultaneously access the same data for both read and write. A collection of one or more Db2 servers that share Db2 data is called a data-sharing group. A Db2 server that belongs to a data-sharing group is a member of that group. All members of a data-sharing group share the same database. Currently, the maximum number of members in a data-sharing group is 128. In addition to the Db2 members, there is also the pureScale\u2122 Cluster Caching Facility component which provides centralized lock management as well as a centralized global cache for data pages (known as the group buffer pool). Each member in the data sharing group can interact directly with the pureScale Cluster Caching Facility component, as shown below, through a very efficient 10Ge network which means each member has point-to-point connectivity to the centralized locking and caching facility. Db2 pureScale includes support for socket communication that eliminates the need for specialized 10Ge RDMA adapters. All the availability and recovery functions of pureScale are fully supported with sockets. However, the communication optimizations (i.e., memory to memory messaging with RDMA) are not applicable to socket configurations. To reduce communication between nodes in the cluster for lock management and global caching services, Db2 pureScale uses the pureScale Cluster Caching Facility (here-in referred to simply as the CF) along with RDMA technology to deliver transparent application scalability. RDMA allows each member in the cluster to directly access memory in the CF and for the CF to directly access the memory of each member. For example, assume that a member in a cluster (Member 1) wants to read a data page that is not in its local buffer pool. Db2 assigns an agent (or thread) to perform this transaction; the agent then uses RDMA to directly write into the memory of the CF to indicate that it has interest in a page. If the page that Member 1 wants to read is already in the CF\u2019s global centralized buffer pool, the CF will push that page directly into the memory of Member 1 instead of having the agent on that member perform the I/O operation to read it from disk. The use of RDMA allows Member 1's agent to simply make a memcopy (memory copy) call to a remote server without the need for costly process-to-process communication calls, processor interrupts, IP stack calls, and so on. Quite simply, pureScale allows a member\u2019s agent to perform what appears to be a local memory copy operation when in fact the target is the memory address of a remote machine. These lightweight remote memory calls, along with a centralized buffer pool and lock management facilities, means that an application does not have to connect to the member where the data already resides. It is just as efficient for any member in the cluster to receive a data page from the global buffer pool regardless of the size of the cluster. Most RDMA calls are so fast that the Db2 process making the call does not need to yield the CPU while waiting for the response from the CF and does not have to be rescheduled to complete the task. For example, to notify the CF that a row is about to be updated (and therefore an X lock is required) a member\u2019s agent performs a Set Lock State (SLS) request by writing the lock information directly into memory on the CF. The CF confirms that there are no other members in the cluster that already have this row X locked and will directly write into the requesting member\u2019s memory to grant the lock. The entire round trip for this SLS can take as little as 15 microseconds and therefore the agent does not need to yield the CPU. The agent can continue to be productive rather than waiting on an IP interrupt (avoiding unnecessary context switches) as is the case with other scale-out architectures. If for a specific operation, such as long-running batch transactions, it would make more sense for the Db2 agent to yield the CPU, Db2 will make an autonomic decision to dynamically yield the CPU. Another important Db2 scalability feature that goes together with transparent application scaling includes the Db2 pureScale built-in load balancing across the members of a cluster. Applications do not need to be cluster-aware to take advantage of the load balancing. The same client-side drivers that Db2 for z/OS data sharing customers use today work with Db2 pureScale for cluster load balancing. Db2 pureScale takes availability to a new level when compared to other offerings available on distributed platforms. Db2 pureScale provides full access to every page of data that does not need recovery and is always aware of which specific pages need recovery without having to perform a single I/O operation. This is yet another important innovation made possible through the unique capabilities of a centralized CF.","title":"What is Db2 pureScale?"},{"location":"ps-members/","text":"Members Db2 pureScale consists of members (Db2 Instances) that run on a physical machine or an LPAR. The simulator allows up to three members to be defined in the system. Each member has a unique number and color as shown in the following image. Member #1 is light blue, member #2 is light green, and member #3 is yellow. These colors are used in the CF to highlight which member has read a page into its local buffer pool. In the CF, read \"interest\" in a page is marked by small squares below the lock icon. The color of the square indicates which member has read the page. If a member has a page latch during an update statement, the lock symbol in the CF will change to the color of the member. For instance, if member #2 has a page latch on page 3, the CF will look like the following. The member contains a shutdown button that can be used to cause a hardware or software outage. If a member is currently involved in an UPDATE transaction, pressing the power off button will cause a recovery to occur. Any in-flight transactions will be rolled back, and the server will be restarted. If the member does not have any outstanding transactions, pressing the power off button will shut it down, like placing it in maintenance mode. If you want to remove a member from a configuration, make sure that there are no update transactions pending through that member.","title":"Member Configuration"},{"location":"ps-members/#members","text":"Db2 pureScale consists of members (Db2 Instances) that run on a physical machine or an LPAR. The simulator allows up to three members to be defined in the system. Each member has a unique number and color as shown in the following image. Member #1 is light blue, member #2 is light green, and member #3 is yellow. These colors are used in the CF to highlight which member has read a page into its local buffer pool. In the CF, read \"interest\" in a page is marked by small squares below the lock icon. The color of the square indicates which member has read the page. If a member has a page latch during an update statement, the lock symbol in the CF will change to the color of the member. For instance, if member #2 has a page latch on page 3, the CF will look like the following. The member contains a shutdown button that can be used to cause a hardware or software outage. If a member is currently involved in an UPDATE transaction, pressing the power off button will cause a recovery to occur. Any in-flight transactions will be rolled back, and the server will be restarted. If the member does not have any outstanding transactions, pressing the power off button will shut it down, like placing it in maintenance mode. If you want to remove a member from a configuration, make sure that there are no update transactions pending through that member.","title":"Members"},{"location":"ps-playback/","text":"Script Playback The pureScale simulator comes with several \"pre-built\" simulations as well as the ability for you to create your own scenarios. The middle section of buttons at the top of the pureScale screen contains the playback and recording buttons. From left to right the buttons are: Scripts - Pressing this button will give you the list of pre-defined scripts and any that you may have created. Save - If you have done a recording session, pressing the Save button will let you store it for future use. Record - Pressing Record will place the simulator into record mode where it will track every button that you click. Play - When you load or record a script, pressing the Play button will play it back. Loading Scripts and Playing Them The Scripts button is used to load a pre-defined script into the simulator. When this button is pressed, the simulator will display a list of pre-defined and saved simulations. To load a file into the simulator, either double-click on the description of the simulation or select the description by clicking on it once and then hitting the load button. If you click on the FILES button, it will give you a list of the files in the directory that the program is running in. File List Display The file list may not match exactly that shown above due to differences in operating systems. Select a file from the list and then click on the open button. Whichever technique you use, the file will be loaded into the simulator, but it will not begin running until you hit the play button. The play button will start the simulation that you loaded, and it will disable all the recording buttons and replace the play button with the stop button. You can press the STOP button at any time to terminate the simulation. Note that while the simulation is running, you will see the following two buttons on the far-right side of the screen. The section on running a simulation mentioned how clicking anywhere on the black network background would advance the simulation to the next step or message. The green button in this sidebar is used to make the simulation close the current message and move to the next step. Similarly, the red stop button is used to complete the current step - not stop the entire simulation. The stop button that is shown on the top menu bar is used to completely stop a simulation. A subsequent press of the PLAY button would start the simulation from the beginning. When you press this stop button, all it does is complete the current transaction (without animation or messages). So, for instance, if you were halfway through an UPDATE statement, the STOP button would complete the UPDATE (with all locking and buffer changes, etc...) so that the database is consistent. Then the next SELECT or UPDATE can take place. This is useful for skipping several steps that you don't want to see. However, remember that this is not the same as stopping the entire simulation.","title":"Script Playback"},{"location":"ps-playback/#script-playback","text":"The pureScale simulator comes with several \"pre-built\" simulations as well as the ability for you to create your own scenarios. The middle section of buttons at the top of the pureScale screen contains the playback and recording buttons. From left to right the buttons are: Scripts - Pressing this button will give you the list of pre-defined scripts and any that you may have created. Save - If you have done a recording session, pressing the Save button will let you store it for future use. Record - Pressing Record will place the simulator into record mode where it will track every button that you click. Play - When you load or record a script, pressing the Play button will play it back.","title":"Script Playback"},{"location":"ps-playback/#loading-scripts-and-playing-them","text":"The Scripts button is used to load a pre-defined script into the simulator. When this button is pressed, the simulator will display a list of pre-defined and saved simulations. To load a file into the simulator, either double-click on the description of the simulation or select the description by clicking on it once and then hitting the load button. If you click on the FILES button, it will give you a list of the files in the directory that the program is running in. File List Display The file list may not match exactly that shown above due to differences in operating systems. Select a file from the list and then click on the open button. Whichever technique you use, the file will be loaded into the simulator, but it will not begin running until you hit the play button. The play button will start the simulation that you loaded, and it will disable all the recording buttons and replace the play button with the stop button. You can press the STOP button at any time to terminate the simulation. Note that while the simulation is running, you will see the following two buttons on the far-right side of the screen. The section on running a simulation mentioned how clicking anywhere on the black network background would advance the simulation to the next step or message. The green button in this sidebar is used to make the simulation close the current message and move to the next step. Similarly, the red stop button is used to complete the current step - not stop the entire simulation. The stop button that is shown on the top menu bar is used to completely stop a simulation. A subsequent press of the PLAY button would start the simulation from the beginning. When you press this stop button, all it does is complete the current transaction (without animation or messages). So, for instance, if you were halfway through an UPDATE statement, the STOP button would complete the UPDATE (with all locking and buffer changes, etc...) so that the database is consistent. Then the next SELECT or UPDATE can take place. This is useful for skipping several steps that you don't want to see. However, remember that this is not the same as stopping the entire simulation.","title":"Loading Scripts and Playing Them"},{"location":"ps-recording/","text":"Recording and Saving Scripts If you want to record a scenario to demonstrate to others, you can do it with the record button. When the record button is pressed, any current configuration found on the screen is deleted and you are left with a blank configuration (except for the file system). The background will have the word RECORDING set in red. Once recording has been started, the buttons in the recording section will turn off, except for the STOP recording button. The following keystrokes will be recorded in this mode: Create Client Create Member Create CF Drop / Kill Client Drop / Kill Member Select Row Update Row Change locking mode, connection type Pre-loading buffers The selects and updates that you run as part of the simulation will be captured (i.e., the actual workload that you run). Once you are done with the simulation you can press the STOP button and then either playback the simulation (with the PLAY button) or press the SAVE button to file your work. When you press the SAVE button, the simulator will first ask you to give a description of the simulation you just created. This is the same description that will be placed in the FILE menu when you request all the pre-defined and saved scripts on disk. After pressing SAVE, a file menu will be displayed where you will enter the filename that you want to assign to the simulation. By default, all simulator files have an extension of \".psc\". There are some special files found in the /system directory that are used by the simulator to run the examples. These files all start with the underscore \"_\" and are not meant to be changed. Simulations that are saved are normally placed in the root directory where the simulator program is found. Pre-Loading buffers A handy shortcut is available that will let you pre-load the buffers of the members or CF before running any simulations. Before you start running your simulation, you can drag pages from the database to a member or the CF. You can only move a page from the database to the same page slot in a member (or CF). For instance, page 1 from the database must move to page 1 of a member. You do not have to populate all the members or the CF with data, so it is possible to load up the CF with data without filling any buffer pages in the members. To move a page, click on a page in the CF and then while holding the LEFT mouse button down, drag the page to a member or CF. When you release the mouse over a page in a member or CF, the contents of that page will be updated with the data from the database. Annotations You can add annotations to your recorded script as you go along. To add an annotation, place the mouse at the location on the screen where you want a message placed and then right click. This will pop up a comment box that you can then enter your text. You can move the comment box anywhere on the screen by left-clicking on the title bar and holding down the mouse while you drag it to the location you want. Within the text box you can add any text that you want. When you are finished typing, hitting ENTER will save the comment. Then when your script is run, the comment will display for 4 seconds before continuing onto the next step. For instance, the text in the previous screen would look like this image. By default, the message will display for a few seconds before going to the next step in your simulation. You can add a button to the message to make it wait for the person to press before continuing. The following script adds a button to the annotation. When the script runs, the user will see the following. One final thing that you can add to an annotation is a title. A title will follow any button definitions and is separated from the message with a colon ( : ). [OK]Test a button:Here is the text separate from the title When this is run, the user will see the following.","title":"Recording a Script"},{"location":"ps-recording/#recording-and-saving-scripts","text":"If you want to record a scenario to demonstrate to others, you can do it with the record button. When the record button is pressed, any current configuration found on the screen is deleted and you are left with a blank configuration (except for the file system). The background will have the word RECORDING set in red. Once recording has been started, the buttons in the recording section will turn off, except for the STOP recording button. The following keystrokes will be recorded in this mode: Create Client Create Member Create CF Drop / Kill Client Drop / Kill Member Select Row Update Row Change locking mode, connection type Pre-loading buffers The selects and updates that you run as part of the simulation will be captured (i.e., the actual workload that you run). Once you are done with the simulation you can press the STOP button and then either playback the simulation (with the PLAY button) or press the SAVE button to file your work. When you press the SAVE button, the simulator will first ask you to give a description of the simulation you just created. This is the same description that will be placed in the FILE menu when you request all the pre-defined and saved scripts on disk. After pressing SAVE, a file menu will be displayed where you will enter the filename that you want to assign to the simulation. By default, all simulator files have an extension of \".psc\". There are some special files found in the /system directory that are used by the simulator to run the examples. These files all start with the underscore \"_\" and are not meant to be changed. Simulations that are saved are normally placed in the root directory where the simulator program is found.","title":"Recording and Saving Scripts"},{"location":"ps-recording/#pre-loading-buffers","text":"A handy shortcut is available that will let you pre-load the buffers of the members or CF before running any simulations. Before you start running your simulation, you can drag pages from the database to a member or the CF. You can only move a page from the database to the same page slot in a member (or CF). For instance, page 1 from the database must move to page 1 of a member. You do not have to populate all the members or the CF with data, so it is possible to load up the CF with data without filling any buffer pages in the members. To move a page, click on a page in the CF and then while holding the LEFT mouse button down, drag the page to a member or CF. When you release the mouse over a page in a member or CF, the contents of that page will be updated with the data from the database.","title":"Pre-Loading buffers"},{"location":"ps-recording/#annotations","text":"You can add annotations to your recorded script as you go along. To add an annotation, place the mouse at the location on the screen where you want a message placed and then right click. This will pop up a comment box that you can then enter your text. You can move the comment box anywhere on the screen by left-clicking on the title bar and holding down the mouse while you drag it to the location you want. Within the text box you can add any text that you want. When you are finished typing, hitting ENTER will save the comment. Then when your script is run, the comment will display for 4 seconds before continuing onto the next step. For instance, the text in the previous screen would look like this image. By default, the message will display for a few seconds before going to the next step in your simulation. You can add a button to the message to make it wait for the person to press before continuing. The following script adds a button to the annotation. When the script runs, the user will see the following. One final thing that you can add to an annotation is a title. A title will follow any button definitions and is separated from the message with a colon ( : ). [OK]Test a button:Here is the text separate from the title When this is run, the user will see the following.","title":"Annotations"},{"location":"ps-reservation/","text":"Reserving Db2 pureScale Simulator The following section provides details on how to reserve an image of the Db2 pureScale simulator. Workshop Users If you are part of a workshop, you do not have to request a reservation. Instead, go to the Getting Started section. Requesting a TechZone image Click on the following link to open the TechZone reservation portal for the pureScale simulator ( https://ibm.biz/techzone-purescale ). If this brings up the pureScale simulator reservation screen, skip to Reservation Details . If this does not work, view the Db2 Modernization collection and select the Db2 pureScale simulator ( https://techzone.ibm.com/collection/db2-modernization ). If you have not logged into the IBM Cloud site, you will be asked to authenticate with your IBM userid. If you do not have an IBM userid, you will need to register for one. This lab is open to IBMers and Business Partners. Once you have logged in, you should see the following. Select the Environment tab on the far-left side. Select the pureScale Simulator There may be more than one environment available. Choose the pureScale simulator. Reservation Details The initial question will ask if you want to reserve the system now or for a later date. Select \"reserve now\" (why wait?). The next screen will ask what the purpose of the reservation is. For \"Purpose\" select Education or Test. Either of these options will limit the amount of time that you will be able to use the system. A purpose description will be highlighted once you select the reservation type. Fill in the purpose field with something meaningful (Db2 pureScale education). Next select the preferred Geography for the image. Choose any of the regions that are closest to your location. Server Locations The TechZone scheduler will pick a location in your region that has capacity to deploy your image. The available regions are constantly being updated, so your list of servers will be different from those shown in the image above, Once the location has been set, the start and end dates are shown in the panel along with an agreement dialog (far right bottom of the display). Make sure you select enough time for you to use the lab! It defaults to 2 days, but you can extend the reservation. VPN Access You do not need to enable VPN Access! Make sure it remains Disabled ! You must accept the terms and conditions for the reservation in order to use TechZone. Once you are satisfied with the settings, press the Submit button. Reservation Failure If you find that your reservation is not being provisioned, check the status of the TechZone environment by referring to the TechZone status page at https://techzone.status.io . At this point you will need to wait patiently for an email that acknowledges that your request has been placed into Provisioning mode. Eventually you will receive an email confirming that the system is ready to be used. Note that this can take a number of hours depending on the load on the TechZone servers. You may also get a message telling you that the system provisioning has Failed. Ignore the reason field since it is usually related to an environment failure caused by lack of resources. Check the status of TechZone first ( https://techzone.status.io ). If the systems appear to be okay, try requesting another image or using a different server location if possible. Contact TechZone support if you are having difficulties provisioning a system. Once you have confirmation that the system is up and running, click on the View My Reservations button to access your environment. At this point you can continue on the section on Accessing the System .","title":"Reserving an Instance"},{"location":"ps-reservation/#reserving-db2-purescale-simulator","text":"The following section provides details on how to reserve an image of the Db2 pureScale simulator. Workshop Users If you are part of a workshop, you do not have to request a reservation. Instead, go to the Getting Started section.","title":"Reserving Db2 pureScale Simulator"},{"location":"ps-reservation/#requesting-a-techzone-image","text":"Click on the following link to open the TechZone reservation portal for the pureScale simulator ( https://ibm.biz/techzone-purescale ). If this brings up the pureScale simulator reservation screen, skip to Reservation Details . If this does not work, view the Db2 Modernization collection and select the Db2 pureScale simulator ( https://techzone.ibm.com/collection/db2-modernization ). If you have not logged into the IBM Cloud site, you will be asked to authenticate with your IBM userid. If you do not have an IBM userid, you will need to register for one. This lab is open to IBMers and Business Partners. Once you have logged in, you should see the following. Select the Environment tab on the far-left side. Select the pureScale Simulator There may be more than one environment available. Choose the pureScale simulator.","title":"Requesting a TechZone image"},{"location":"ps-reservation/#reservation-details","text":"The initial question will ask if you want to reserve the system now or for a later date. Select \"reserve now\" (why wait?). The next screen will ask what the purpose of the reservation is. For \"Purpose\" select Education or Test. Either of these options will limit the amount of time that you will be able to use the system. A purpose description will be highlighted once you select the reservation type. Fill in the purpose field with something meaningful (Db2 pureScale education). Next select the preferred Geography for the image. Choose any of the regions that are closest to your location. Server Locations The TechZone scheduler will pick a location in your region that has capacity to deploy your image. The available regions are constantly being updated, so your list of servers will be different from those shown in the image above, Once the location has been set, the start and end dates are shown in the panel along with an agreement dialog (far right bottom of the display). Make sure you select enough time for you to use the lab! It defaults to 2 days, but you can extend the reservation. VPN Access You do not need to enable VPN Access! Make sure it remains Disabled ! You must accept the terms and conditions for the reservation in order to use TechZone. Once you are satisfied with the settings, press the Submit button. Reservation Failure If you find that your reservation is not being provisioned, check the status of the TechZone environment by referring to the TechZone status page at https://techzone.status.io . At this point you will need to wait patiently for an email that acknowledges that your request has been placed into Provisioning mode. Eventually you will receive an email confirming that the system is ready to be used. Note that this can take a number of hours depending on the load on the TechZone servers. You may also get a message telling you that the system provisioning has Failed. Ignore the reason field since it is usually related to an environment failure caused by lack of resources. Check the status of TechZone first ( https://techzone.status.io ). If the systems appear to be okay, try requesting another image or using a different server location if possible. Contact TechZone support if you are having difficulties provisioning a system. Once you have confirmation that the system is up and running, click on the View My Reservations button to access your environment. At this point you can continue on the section on Accessing the System .","title":"Reservation Details"},{"location":"ps-settings/","text":"Options There are a variety of options that are available to the user to control the speed of animation and the length that messages are displayed. The buttons on the far-right side of the simulator are: Message (Info) display Animation speed Session Review Tracing (Advanced) Tutorial Help Tutorial and Help The two buttons on the far-right side of the toolbar are used to guide you using the simulator. The TUTORIAL button will run a script taking you through some of the features that are found in the simulator, while the HELP button displays the full help information (this file). Message Display The Message (INFO) button is used to control the display of informational messages on the screen. The default value for informational messages is on. This means that the simulator will display messages as it runs and wait 1.5 seconds before continuing. These messages are usually placed beside one of the objects on the screen, such as clients, members, CF, or the file system. If you want to skip the message, you can click anywhere on the black background or the green sidebar that displays on the far right-hand side of the display while the simulation is running. If you click on the message itself, the background color of the message will turn yellow. When the message is yellow, the system will pause until you click on the message again, the black background, or the green arrow on the sidebar. Clicking on the INFO button will change its status to OFF. When messages are off, no informational messages will be shown. Your simulations will run fast, but you won't know what is going on! However, there are situations where you may be debugging or testing a configuration and you want to skip the messages that are being shown. See the session review button for details on how to review the messages you may have missed. If you press the INFO button one more time it will change to a status of PAUSE. When the messages are in PAUSE status, every message will pause waiting for you to click on the message again, the black background or the arrow on the sidebar. If you click the INFO button one more time it will cycle back to messages being ON. Animation Speed When the simulation runs, the messages that are sent between clients, members, database, and the CF are animated using a series of dots. For example, the following image shows a message being sent between a client and a member. On average, these dots use between 1 to 2 seconds to reach their destination depending on distance (Note! In a real pureScale system, one of these communication requests takes about 15 microseconds!). You have the option of speeding up the animation and the length of time a message is displayed by clicking on this button. The values of the animation speed can be: 1.0x - The default speed of 1-2 seconds depending on distance 1.5x - A 50% increase in speed 2.0x - Twice as fast 4.0x - Four times as fast Off If the animation speed is set to a numeric value (1.0, 1.5, 2.0, 4.0), the messages will continue to be displayed, but the pause time (for INFO ON) will be reduced. So instead of the default 1.5 seconds for a message to display, a 2.0x setting will make the message stay on the screen for only .75 seconds. You have the option of clicking on a message to pause it for further reading or use the PAUSE setting for messages. The final value (OFF) will draw all the dots immediately from the source to the destination without individually turning them on and off. This mode speeds up the drawing of the communication lines, but it does not speed up the messages. The messages will continue to pause for 1.5 seconds before continuing. This mode is a compromise if you want to speed up the simulation but still have time to read the messages. You can change the default values that the program uses for the message delay, message format, and the animation speed by modifying the _options.psc file found in the system directory. To change the amount of time that a message pauses before continuing, you would change the following line to include the delay time. In this example, the pause time is set to 3.5 seconds. op t io n message , 3.5 Session Review All the actions that take place during a session are recorded. You may decide to run the simulator with the messages turned off or with very fast animation. At any point in time, you can click on the review button to display the actions and messages that were displayed during the running of the simulator. The program will display the actions and messages in a separate window. The system will continue to record the steps during your session unless you press the reset button. The reset button will clear the contents of the recording buffer. Tracing (Advanced) The pureScale simulator is built upon several scripts that run in the background. If an error occurs, the trace window will appear and describe what went wrong. If you do encounter this, please let us know so we can figure out what the problem is. If you are interested in what the scripts are doing, click on the TRACE button. The following image is a sample trace window that would get generated when you start a SELECT statement from a client. The top of the trace window will show what statement is currently being executed while the bottom half will show the status of variables within the procedure. The trace window will update as the simulation runs. If your INFO setting is set to PAUSE, you will end up single stepping through the code. You must click on the black background or the green arrow at the top corner of the trace window to continue to the next step. If the INFO setting is ON, the code will run at the rate of statement every 1.5 seconds. Setting the animation button to 2x or 4x may make it more bearable to watch the code running! This trace window is usually reserved for debugging scripts, so you shouldn't have to use this for running your simulations unless you are curious about what is happening \"under the covers\". Pressing the TRACE button again will remove the trace window from the screen.","title":"Simulator Options"},{"location":"ps-settings/#options","text":"There are a variety of options that are available to the user to control the speed of animation and the length that messages are displayed. The buttons on the far-right side of the simulator are: Message (Info) display Animation speed Session Review Tracing (Advanced) Tutorial Help","title":"Options"},{"location":"ps-settings/#tutorial-and-help","text":"The two buttons on the far-right side of the toolbar are used to guide you using the simulator. The TUTORIAL button will run a script taking you through some of the features that are found in the simulator, while the HELP button displays the full help information (this file).","title":"Tutorial and Help"},{"location":"ps-settings/#message-display","text":"The Message (INFO) button is used to control the display of informational messages on the screen. The default value for informational messages is on. This means that the simulator will display messages as it runs and wait 1.5 seconds before continuing. These messages are usually placed beside one of the objects on the screen, such as clients, members, CF, or the file system. If you want to skip the message, you can click anywhere on the black background or the green sidebar that displays on the far right-hand side of the display while the simulation is running. If you click on the message itself, the background color of the message will turn yellow. When the message is yellow, the system will pause until you click on the message again, the black background, or the green arrow on the sidebar. Clicking on the INFO button will change its status to OFF. When messages are off, no informational messages will be shown. Your simulations will run fast, but you won't know what is going on! However, there are situations where you may be debugging or testing a configuration and you want to skip the messages that are being shown. See the session review button for details on how to review the messages you may have missed. If you press the INFO button one more time it will change to a status of PAUSE. When the messages are in PAUSE status, every message will pause waiting for you to click on the message again, the black background or the arrow on the sidebar. If you click the INFO button one more time it will cycle back to messages being ON.","title":"Message Display"},{"location":"ps-settings/#animation-speed","text":"When the simulation runs, the messages that are sent between clients, members, database, and the CF are animated using a series of dots. For example, the following image shows a message being sent between a client and a member. On average, these dots use between 1 to 2 seconds to reach their destination depending on distance (Note! In a real pureScale system, one of these communication requests takes about 15 microseconds!). You have the option of speeding up the animation and the length of time a message is displayed by clicking on this button. The values of the animation speed can be: 1.0x - The default speed of 1-2 seconds depending on distance 1.5x - A 50% increase in speed 2.0x - Twice as fast 4.0x - Four times as fast Off If the animation speed is set to a numeric value (1.0, 1.5, 2.0, 4.0), the messages will continue to be displayed, but the pause time (for INFO ON) will be reduced. So instead of the default 1.5 seconds for a message to display, a 2.0x setting will make the message stay on the screen for only .75 seconds. You have the option of clicking on a message to pause it for further reading or use the PAUSE setting for messages. The final value (OFF) will draw all the dots immediately from the source to the destination without individually turning them on and off. This mode speeds up the drawing of the communication lines, but it does not speed up the messages. The messages will continue to pause for 1.5 seconds before continuing. This mode is a compromise if you want to speed up the simulation but still have time to read the messages. You can change the default values that the program uses for the message delay, message format, and the animation speed by modifying the _options.psc file found in the system directory. To change the amount of time that a message pauses before continuing, you would change the following line to include the delay time. In this example, the pause time is set to 3.5 seconds. op t io n message , 3.5","title":"Animation Speed"},{"location":"ps-settings/#session-review","text":"All the actions that take place during a session are recorded. You may decide to run the simulator with the messages turned off or with very fast animation. At any point in time, you can click on the review button to display the actions and messages that were displayed during the running of the simulator. The program will display the actions and messages in a separate window. The system will continue to record the steps during your session unless you press the reset button. The reset button will clear the contents of the recording buffer.","title":"Session Review"},{"location":"ps-settings/#tracing-advanced","text":"The pureScale simulator is built upon several scripts that run in the background. If an error occurs, the trace window will appear and describe what went wrong. If you do encounter this, please let us know so we can figure out what the problem is. If you are interested in what the scripts are doing, click on the TRACE button. The following image is a sample trace window that would get generated when you start a SELECT statement from a client. The top of the trace window will show what statement is currently being executed while the bottom half will show the status of variables within the procedure. The trace window will update as the simulation runs. If your INFO setting is set to PAUSE, you will end up single stepping through the code. You must click on the black background or the green arrow at the top corner of the trace window to continue to the next step. If the INFO setting is ON, the code will run at the rate of statement every 1.5 seconds. Setting the animation button to 2x or 4x may make it more bearable to watch the code running! This trace window is usually reserved for debugging scripts, so you shouldn't have to use this for running your simulations unless you are curious about what is happening \"under the covers\". Pressing the TRACE button again will remove the trace window from the screen.","title":"Tracing (Advanced)"},{"location":"ps-startup/","text":"Starting the Simulator After you access the virtual machine console, you will see two desktop icons that will reset the screen for optimal display, and start the pureScale simulator program. Start the pureScale Demo If you haven't already done so, double-click on the pureScale icon on the desktop to start the simulator. When the program first starts, it will display a legal disclaimer, which can be read and then dismissed by closing the window by pressing the [x] at the top right corner. Once you've closed the legal disclaimer you will be presented with the following screen: The top row of the pureScale simulator contains several buttons that control the behavior of the system. The buttons can be divided into three groups: pureScale objects for building a system to simulate Record and playback buttons for running pre-configured systems Options for setting the behavior of the simulator Below the screen you will see the network (Ethernet) for connecting clients to members, a 10Ge channel for connecting the Db2 members to the pureScale Cluster Caching Facility, and an I/O channel to the file system. Note that the file system does not run over 10Ge. The I/O system was placed off the 10Ge channel to reduce the number of connections required in the simulator. By default, an empty system is shown whenever the simulator starts. A file system is already created by the simulator and will contain some random names in 16 slots or rows in the table. The file system used by Db2 is IBM\u00ae Spectrum Scale. IBM\u00ae Spectrum Scale is a high-performance enterprise file management that provides online storage management, scalable access, and integrated information lifecycle management tools capable of managing petabytes of data and billions of files. The IBM\u00ae Spectrum Scale file system is shown the bottom left-hand corner of the display connect via an I/O channel to the 10Ge network. Note that 10Ge is not used for the actual I/O but is merely used for simulating the I/O channel. You can customize the values that are shown in the file system by editing the _gpfs.cf file found in the system directory. For more details on how this is done, please refer to the section on IBM\u00ae Spectrum Scale (GPFS).","title":"Starting the Simulator"},{"location":"ps-startup/#starting-the-simulator","text":"After you access the virtual machine console, you will see two desktop icons that will reset the screen for optimal display, and start the pureScale simulator program. Start the pureScale Demo If you haven't already done so, double-click on the pureScale icon on the desktop to start the simulator. When the program first starts, it will display a legal disclaimer, which can be read and then dismissed by closing the window by pressing the [x] at the top right corner. Once you've closed the legal disclaimer you will be presented with the following screen: The top row of the pureScale simulator contains several buttons that control the behavior of the system. The buttons can be divided into three groups: pureScale objects for building a system to simulate Record and playback buttons for running pre-configured systems Options for setting the behavior of the simulator Below the screen you will see the network (Ethernet) for connecting clients to members, a 10Ge channel for connecting the Db2 members to the pureScale Cluster Caching Facility, and an I/O channel to the file system. Note that the file system does not run over 10Ge. The I/O system was placed off the 10Ge channel to reduce the number of connections required in the simulator. By default, an empty system is shown whenever the simulator starts. A file system is already created by the simulator and will contain some random names in 16 slots or rows in the table. The file system used by Db2 is IBM\u00ae Spectrum Scale. IBM\u00ae Spectrum Scale is a high-performance enterprise file management that provides online storage management, scalable access, and integrated information lifecycle management tools capable of managing petabytes of data and billions of files. The IBM\u00ae Spectrum Scale file system is shown the bottom left-hand corner of the display connect via an I/O channel to the 10Ge network. Note that 10Ge is not used for the actual I/O but is merely used for simulating the I/O channel. You can customize the values that are shown in the file system by editing the _gpfs.cf file found in the system directory. For more details on how this is done, please refer to the section on IBM\u00ae Spectrum Scale (GPFS).","title":"Starting the Simulator"}]}